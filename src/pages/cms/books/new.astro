---
import Base from '../../../layouts/Base.astro';
import { supabaseServer } from '../../../lib/supabase-server';

// Check authentication
const supabase = supabaseServer(Astro.cookies);
const { data: { user } } = await supabase.auth.getUser();

if (!user) {
  return Astro.redirect('/auth?message=Please sign in to create content');
}

// Check if user has editor or admin role
const { data: userRoles } = await supabase
  .from('user_roles')
  .select('role')
  .eq('user_id', user.id);

const isEditor = userRoles && userRoles.some(role => ['admin', 'editor'].includes(role.role));

if (!isEditor) {
  return Astro.redirect('/auth?message=You need editor permissions to create content');
}
---

<Base title="New Book - CMS">
  <div class="min-h-screen bg-neutral-950">
    <!-- Header -->
    <header class="bg-neutral-900 border-b border-neutral-800">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex items-center justify-between h-16">
          <div class="flex items-center">
            <a href="/cms" class="text-neutral-400 hover:text-amber-400 transition-colors mr-4">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
              </svg>
            </a>
            <h1 class="text-2xl font-bold text-amber-100">New Book</h1>
          </div>
          <div class="flex items-center space-x-4">
            <button 
              id="save-draft"
              class="bg-neutral-800 hover:bg-neutral-700 text-neutral-200 px-4 py-2 rounded-lg transition-colors"
            >
              Save Draft
            </button>
            <button 
              id="publish"
              class="bg-amber-700 hover:bg-amber-600 text-white px-4 py-2 rounded-lg transition-colors"
            >
              Publish
            </button>
          </div>
        </div>
      </div>
    </header>

    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- Book Form -->
      <div class="bg-neutral-900 border border-neutral-800 rounded-xl p-6">
        <form id="book-form" class="space-y-6">
          <!-- Title -->
          <div>
            <label for="title" class="block text-sm font-medium text-amber-100 mb-2">
              Title *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              required
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
              placeholder="Enter book title..."
            />
          </div>

          <!-- Author -->
          <div>
            <label for="author" class="block text-sm font-medium text-amber-100 mb-2">
              Author *
            </label>
            <input
              type="text"
              id="author"
              name="author"
              required
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
              placeholder="Author name..."
            />
          </div>

          <!-- Description -->
          <div>
            <label for="description" class="block text-sm font-medium text-amber-100 mb-2">
              Description *
            </label>
            <textarea
              id="description"
              name="description"
              rows="4"
              required
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
              placeholder="Brief description of the book..."
            ></textarea>
          </div>

          <!-- Affiliate Link -->
          <div>
            <label for="affiliate_url" class="block text-sm font-medium text-amber-100 mb-2">
              Affiliate Link
            </label>
            <input
              type="url"
              id="affiliate_url"
              name="affiliate_url"
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
              placeholder="https://amazon.com/dp/..."
            />
            <p class="text-xs text-neutral-400 mt-1">Amazon or other affiliate link</p>
          </div>

          <!-- Topics -->
          <div>
            <label for="topics" class="block text-sm font-medium text-amber-100 mb-2">
              Topics
            </label>
            <input
              type="text"
              id="topics"
              name="topics"
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
              placeholder="bible study, prophecy, prayer, etc. (comma-separated)"
            />
          </div>

          <!-- Body -->
          <div>
            <label for="body" class="block text-sm font-medium text-amber-100 mb-2">
              Review/Notes
            </label>
            <textarea
              id="body"
              name="body"
              rows="8"
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 placeholder-neutral-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent font-mono text-sm"
              placeholder="Your review or notes about the book in Markdown..."
            ></textarea>
            <p class="text-xs text-neutral-400 mt-1">Supports Markdown formatting</p>
          </div>

          <!-- Status -->
          <div>
            <label for="status" class="block text-sm font-medium text-amber-100 mb-2">
              Status
            </label>
            <select
              id="status"
              name="status"
              class="w-full px-4 py-3 bg-neutral-800 border border-neutral-700 rounded-lg text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent"
            >
              <option value="draft">Draft</option>
              <option value="published">Published</option>
            </select>
          </div>

          <!-- Form Actions -->
          <div class="flex items-center justify-between pt-6 border-t border-neutral-700">
            <div class="text-sm text-neutral-400">
              <span id="save-status">Ready to save</span>
            </div>
            <div class="flex space-x-3">
              <button
                type="button"
                id="save-draft-btn"
                class="bg-neutral-700 hover:bg-neutral-600 text-neutral-200 px-6 py-2 rounded-lg transition-colors"
              >
                Save Draft
              </button>
              <button
                type="submit"
                id="publish-btn"
                class="bg-amber-700 hover:bg-amber-600 text-white px-6 py-2 rounded-lg transition-colors"
              >
                Publish
              </button>
            </div>
          </div>
        </form>
      </div>
    </div>

    <script>
      // Form submission
      const bookForm = document.getElementById('book-form') as HTMLFormElement;
      if (bookForm) {
        bookForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          const formData = new FormData(this);
          const data = {
            title: formData.get('title') as string,
            author: formData.get('author') as string,
            description: formData.get('description') as string,
            affiliate_url: formData.get('affiliate_url') as string,
            topics: formData.get('topics') ? (formData.get('topics') as string).split(',').map((topic: string) => topic.trim()).filter((topic: string) => topic) : [],
            body: formData.get('body') as string,
            status: formData.get('status') as string
          };

          const saveBtn = document.getElementById('publish-btn') as HTMLButtonElement;
          const saveDraftBtn = document.getElementById('save-draft-btn') as HTMLButtonElement;
          const statusEl = document.getElementById('save-status') as HTMLElement;

          if (!saveBtn || !saveDraftBtn || !statusEl) return;

          // Disable buttons and show loading
          saveBtn.disabled = true;
          saveDraftBtn.disabled = true;
          saveBtn.textContent = 'Publishing...';
          statusEl.textContent = 'Publishing...';

          try {
            const response = await fetch('/api/cms/books', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data)
            });

            if (response.ok) {
              const result = await response.json();
              statusEl.textContent = 'Published successfully!';
              statusEl.className = 'text-sm text-green-400';
              
              // Redirect to CMS dashboard after a short delay
              setTimeout(() => {
                window.location.href = '/cms';
              }, 1500);
            } else {
              const error = await response.json();
              statusEl.textContent = `Error: ${error.message || 'Failed to publish'}`;
              statusEl.className = 'text-sm text-red-400';
            }
          } catch (error: any) {
            statusEl.textContent = `Error: ${error.message}`;
            statusEl.className = 'text-sm text-red-400';
          } finally {
            // Re-enable buttons
            saveBtn.disabled = false;
            saveDraftBtn.disabled = false;
            saveBtn.textContent = 'Publish';
          }
        });
      }

      // Save draft functionality
      const saveDraftBtn = document.getElementById('save-draft-btn') as HTMLButtonElement;
      if (saveDraftBtn) {
        saveDraftBtn.addEventListener('click', async function() {
          const form = document.getElementById('book-form') as HTMLFormElement;
          if (!form) return;
          
          const formData = new FormData(form);
          const data = {
            title: formData.get('title') as string,
            author: formData.get('author') as string,
            description: formData.get('description') as string,
            affiliate_url: formData.get('affiliate_url') as string,
            topics: formData.get('topics') ? (formData.get('topics') as string).split(',').map((topic: string) => topic.trim()).filter((topic: string) => topic) : [],
            body: formData.get('body') as string,
            status: 'draft'
          };

          const statusEl = document.getElementById('save-status') as HTMLElement;
          if (!statusEl) return;

          this.disabled = true;
          this.textContent = 'Saving...';
          statusEl.textContent = 'Saving draft...';

          try {
            const response = await fetch('/api/cms/books', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data)
            });

            if (response.ok) {
              statusEl.textContent = 'Draft saved successfully!';
              statusEl.className = 'text-sm text-green-400';
            } else {
              const error = await response.json();
              statusEl.textContent = `Error: ${error.message || 'Failed to save draft'}`;
              statusEl.className = 'text-sm text-red-400';
            }
          } catch (error: any) {
            statusEl.textContent = `Error: ${error.message}`;
            statusEl.className = 'text-sm text-red-400';
          } finally {
            this.disabled = false;
            this.textContent = 'Save Draft';
          }
        });
      }
    </script>
  </div>
</Base>