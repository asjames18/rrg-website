---
/**
 * Unified Authentication Page
 * Visit: http://localhost:4321/auth
 * Handles both user and admin authentication
 */
export const prerender = false;

import Base from '../layouts/Base.astro';
import AuthForm from '../components/AuthForm';
import SimpleAuthForm from '../components/SimpleAuthForm';
import UserProfile from '../components/UserProfile';
import { supabaseServer } from '../lib/supabase-server';

// Get redirect URL, error, and reset status from query params
const url = new URL(Astro.request.url);
const error = url.searchParams.get('error');
const reset = url.searchParams.get('reset');

// Check if user is already authenticated
let user = null;
let isAdmin = false;

try {
  const supabase = supabaseServer(Astro.cookies);
  const { data: { user: authUser } } = await supabase.auth.getUser();
  
  if (authUser) {
    user = authUser;
    
    // Check if user is admin by querying user_roles table directly
    const { data: userRoles } = await supabase
      .from('user_roles')
      .select('role')
      .eq('user_id', authUser.id)
      .eq('role', 'admin');
    
    isAdmin = Boolean(userRoles && userRoles.length > 0);
  }
} catch (error) {
  console.error('Auth check error:', error);
}
---

<Base title="Sign In | Real & Raw Gospel">
  <div class="min-h-screen bg-gradient-to-br from-black via-neutral-900 to-black">
    <div class="container mx-auto px-4 py-12 md:py-16">
      <div class="max-w-2xl mx-auto">
        <div class="text-center mb-12">
          <h1 class="text-4xl md:text-5xl font-bold text-amber-100 mb-6 font-display">
            {user ? 'Welcome Back' : 'Join the Remnant'}
          </h1>
          <p class="text-xl text-neutral-300 max-w-lg mx-auto leading-relaxed">
            {user 
              ? `You're signed in as ${user.email}. ${isAdmin ? 'You have admin access.' : 'Enjoy your member benefits!'}`
              : 'Create an account to access exclusive content, save favorites, and connect with other believers.'
            }
          </p>
        </div>

               <!-- Success Message -->
               {reset === 'success' && (
                 <div class="mb-8 bg-green-900/20 border border-green-700/50 rounded-xl p-6 backdrop-blur-sm">
                   <div class="flex items-center gap-3">
                     <span class="text-green-400 text-xl">‚úÖ</span>
                     <div>
                       <h3 class="text-green-100 font-semibold mb-1">Password Updated Successfully!</h3>
                       <p class="text-green-200 text-sm">
                         Your password has been updated. You can now sign in with your new password.
                       </p>
                     </div>
                   </div>
                 </div>
               )}

               <!-- Error Message -->
               {error && (
                 <div class="mb-8 bg-red-900/20 border border-red-700/50 rounded-xl p-6 backdrop-blur-sm">
                   <div class="flex items-center gap-3">
                     <span class="text-red-400 text-xl">‚ö†Ô∏è</span>
                     <div>
                       <h3 class="text-red-100 font-semibold mb-1">
                         {error === 'insufficient-permissions' ? 'Insufficient Permissions' : 
                          error === 'auth-failed' ? 'Authentication Failed' :
                          error === 'role-check-failed' ? 'Role Check Failed' :
                          error === 'session-expired' ? 'Session Expired' :
                          error === 'auth-refresh-failed' ? 'Session Refresh Failed' :
                          error === 'database-error' ? 'Database Error' :
                          error === 'server-error' ? 'Server Error' :
                          'Authentication Error'}
                       </h3>
                       <p class="text-red-200 text-sm">
                         {error === 'insufficient-permissions' 
                           ? 'You need admin or editor access to view this page. Contact an administrator if you believe this is an error.'
                           : error === 'auth-failed'
                           ? 'There was an issue with your authentication. Please try signing in again.'
                           : error === 'role-check-failed'
                           ? 'Unable to verify your user role. Please try signing in again or contact support.'
                           : error === 'session-expired'
                           ? 'Your session has expired. Please sign in again.'
                           : error === 'auth-refresh-failed'
                           ? 'Unable to refresh your session. Please sign in again.'
                           : error === 'database-error'
                           ? 'Database connection issue. Please try again in a moment.'
                           : error === 'server-error'
                           ? 'Server error occurred. Please try again or contact support.'
                           : 'There was an issue with your authentication. Please try signing in again.'
                         }
                       </p>
                       {error !== 'insufficient-permissions' && (
                         <div class="mt-3">
                           <button 
                             onclick="window.location.reload()" 
                             class="text-red-300 hover:text-red-100 text-sm underline"
                           >
                             Try Again
                           </button>
                         </div>
                       )}
                     </div>
                   </div>
                 </div>
               )}

        <!-- User Profile (if signed in) -->
        {user ? (
          <div class="mb-8">
            <UserProfile client:load />
            
            <!-- Sign Out Button -->
            <div class="mt-6 mb-8">
              <button 
                id="sign-out-btn"
                class="w-full bg-red-700 hover:bg-red-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 focus:ring-offset-black"
              >
                Sign Out
              </button>
            </div>
            
            <!-- Admin/User specific actions -->
            <div class="mt-8 grid md:grid-cols-2 gap-4">
              {isAdmin ? (
                <>
                  <a 
                    href="/admin-dashboard" 
                    class="bg-amber-700 hover:bg-amber-600 text-white font-semibold py-4 px-6 rounded-lg text-center transition-colors focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black"
                  >
                    <div class="text-xl mb-2">‚ö°</div>
                    <div class="font-bold">Admin Dashboard</div>
                    <div class="text-sm opacity-90">Manage content and users</div>
                  </a>
                  <a 
                    href="/admin" 
                    class="bg-blue-700 hover:bg-blue-600 text-white font-semibold py-4 px-6 rounded-lg text-center transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-black"
                  >
                    <div class="text-xl mb-2">üìù</div>
                    <div class="font-bold">Content Management</div>
                    <div class="text-sm opacity-90">Edit posts, videos, books</div>
                  </a>
                </>
              ) : (
                <>
                  <a 
                    href="/profile" 
                    class="bg-amber-700 hover:bg-amber-600 text-white font-semibold py-4 px-6 rounded-lg text-center transition-colors focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black"
                  >
                    <div class="text-xl mb-2">üë§</div>
                    <div class="font-bold">My Profile</div>
                    <div class="text-sm opacity-90">View and edit your profile</div>
                  </a>
                  <a 
                    href="/" 
                    class="bg-blue-700 hover:bg-blue-600 text-white font-semibold py-4 px-6 rounded-lg text-center transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-black"
                  >
                    <div class="text-xl mb-2">üè†</div>
                    <div class="font-bold">Go Home</div>
                    <div class="text-sm opacity-90">Return to main site</div>
                  </a>
                </>
              )}
            </div>
          </div>
               ) : (
                 <!-- Unified Auth Form (if not signed in) -->
                 <div id="auth-forms">
                   <div class="max-w-md mx-auto">
                     <!-- Loading fallback -->
                     <div id="auth-loading" class="bg-neutral-900/50 backdrop-blur-sm border border-neutral-700/50 rounded-xl p-8 shadow-2xl">
                       <div class="text-center">
                         <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-500 mx-auto mb-4"></div>
                         <p class="text-neutral-300">Loading authentication...</p>
                       </div>
                     </div>
                     <SimpleAuthForm mode="signin" client:load />
                   </div>
                 </div>
               )}

      <!-- Benefits -->
      <div class="mt-16 bg-gradient-to-r from-amber-900/10 to-amber-800/10 border border-amber-700/30 rounded-2xl p-8 backdrop-blur-sm">
        <h3 class="text-2xl font-bold text-amber-100 mb-6 text-center font-display">Why Create an Account?</h3>
        <div class="grid md:grid-cols-2 gap-6 text-neutral-300">
          <div class="flex items-start gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-amber-600/20 rounded-full flex items-center justify-center">
              <span class="text-amber-400 font-bold text-sm">‚úì</span>
            </div>
            <div>
              <div class="font-semibold text-amber-100 mb-1">Save Favorites</div>
              <div class="text-sm">Bookmark posts and videos for later</div>
            </div>
          </div>
          <div class="flex items-start gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-amber-600/20 rounded-full flex items-center justify-center">
              <span class="text-amber-400 font-bold text-sm">‚úì</span>
            </div>
            <div>
              <div class="font-semibold text-amber-100 mb-1">Track Progress</div>
              <div class="text-sm">See what you've read and learned</div>
            </div>
          </div>
          <div class="flex items-start gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-amber-600/20 rounded-full flex items-center justify-center">
              <span class="text-amber-400 font-bold text-sm">‚úì</span>
            </div>
            <div>
              <div class="font-semibold text-amber-100 mb-1">Exclusive Content</div>
              <div class="text-sm">Access member-only teachings</div>
            </div>
          </div>
          <div class="flex items-start gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-amber-600/20 rounded-full flex items-center justify-center">
              <span class="text-amber-400 font-bold text-sm">‚úì</span>
            </div>
            <div>
              <div class="font-semibold text-amber-100 mb-1">Community</div>
              <div class="text-sm">Connect with other believers (coming soon)</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Admin Note -->
      <div class="mt-12 bg-neutral-900/50 border border-neutral-700/50 rounded-xl p-6 backdrop-blur-sm">
        <p class="text-sm text-neutral-300 text-center">
          <strong class="text-amber-100">Content Creators:</strong> Need admin or editor access? 
          Contact the site administrator to get started.
        </p>
      </div>
      </div>
    </div>
  </div>
</Base>

<script type="module">
  // Hide loading fallback when component loads
  document.addEventListener('DOMContentLoaded', () => {
    const loadingEl = document.getElementById('auth-loading');
    if (loadingEl) {
      // Hide loading after a short delay to allow component to load
      setTimeout(() => {
        loadingEl.style.display = 'none';
      }, 1000);
    }
  });

  // Handle sign out button
  document.getElementById('sign-out-btn')?.addEventListener('click', async () => {
    try {
      // Clear client-side state first
      if (typeof window !== 'undefined') {
        // Clear Supabase client
        if (window.__supabaseClient) {
          await window.__supabaseClient.auth.signOut();
          delete window.__supabaseClient;
        }
        
        // Clear all storage
        localStorage.clear();
        sessionStorage.clear();
        
        // Clear all cookies
        document.cookie.split(';').forEach(function(c) {
          document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');
        });
      }
      
      // Call server-side sign out
      const response = await fetch('/api/auth/signout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (response.ok) {
        // Force redirect to auth page
        window.location.href = '/auth?message=signed-out';
      } else {
        console.error('Sign out failed');
        alert('Sign out failed. Please try again.');
      }
    } catch (error) {
      console.error('Sign out error:', error);
      // Force redirect even if API fails
      window.location.href = '/auth?message=signed-out';
    }
  });

  // Handle role-based redirects after authentication
  import { getSupabase } from '../lib/supabase-browser';

  // Get redirect URL from query params
  const urlParams = new URLSearchParams(window.location.search);
  const redirectTo = urlParams.get('redirect') || '/';

  // Listen for auth changes
  const supabase = getSupabase();
  supabase.auth.onAuthStateChange(async (event, session) => {
    if (session?.user && event === 'SIGNED_IN') {
      try {
        // Get user profile to check role
        const { data: profile } = await supabase
          .from('profiles')
          .select('role')
          .eq('id', session.user.id)
          .single();

        const isAdmin = profile?.role === 'admin' || profile?.role === 'editor';
        
        // Redirect based on role and original destination
        setTimeout(() => {
          if (redirectTo.includes('/admin-dashboard') || redirectTo.includes('/admin-login')) {
            // Admin trying to access admin area
            if (isAdmin) {
              window.location.href = redirectTo;
            } else {
              // Not admin, redirect to home with error
              window.location.href = '/auth?error=insufficient-permissions&redirect=' + encodeURIComponent(redirectTo);
            }
          } else {
            // Regular user or admin going to regular page
            window.location.href = redirectTo;
          }
        }, 1500);
      } catch (error) {
        console.error('Error checking user role:', error);
        // Fallback redirect
        setTimeout(() => {
          window.location.href = redirectTo;
        }, 1500);
      }
    }
  });
</script>
