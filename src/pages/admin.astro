---
/**
 * Unified Admin Portal Entry Point
 * Visit: http://localhost:4321/admin
 * 
 * This page provides a unified tabbed interface for all admin functions
 */
export const prerender = false;

import { supabaseServer } from '../lib/supabase-server';
import AdminShell from '../components/admin/AdminShell';

// Authentication check
let user = null;
let userRole = null;
let isAdmin = false;
let isEditor = false;

try {
  const supabase = supabaseServer(Astro.cookies);
  const { data: { user: authUser } } = await supabase.auth.getUser();
  
  if (authUser) {
    user = authUser;
    
    // Try to get user profile and role with fallback
    try {
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('role')
        .eq('id', user.id)
        .maybeSingle();
      
      if (profile && !profileError) {
        userRole = profile.role;
        isAdmin = userRole === 'admin';
        isEditor = userRole === 'editor' || isAdmin;
      } else {
        console.warn('Profile query failed, trying user_roles table:', profileError);
        
        // Fallback: check user_roles table directly
        const { data: userRoles, error: rolesError } = await supabase
          .from('user_roles')
          .select('role')
          .eq('user_id', user.id);
        
        if (userRoles && userRoles.length > 0 && !rolesError) {
          userRole = userRoles[0].role;
          isAdmin = userRole === 'admin';
          isEditor = userRole === 'editor' || isAdmin;
        } else {
          console.warn('User roles query also failed:', rolesError);
          // Default to no permissions if both queries fail
          userRole = 'user';
          isAdmin = false;
          isEditor = false;
        }
      }
    } catch (profileQueryError) {
      console.error('Profile query error:', profileQueryError);
      // Default to no permissions on error
      userRole = 'user';
      isAdmin = false;
      isEditor = false;
    }
  }
} catch (error) {
  console.error('Admin page auth error:', error);
}

// Redirect if not authenticated
if (!user) {
  return Astro.redirect('/auth?redirect=' + encodeURIComponent(Astro.url.pathname));
}

// Re-enable server-side role checking after database permissions are fixed
if (!isEditor) {
  return Astro.redirect('/auth?error=insufficient-permissions&redirect=' + encodeURIComponent(Astro.url.pathname));
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Center | Real & Raw Gospel</title>
  <link rel="icon" href="/rrg-logo.jpg" type="image/jpeg" />
  <link rel="stylesheet" href="/src/styles/global.css" />
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    // Tailwind will be configured via CDN
  </script>
  <style>
    /* Critical fallback styles - Dark theme */
    body {
      background-color: #0b0b0c !important;
      color: #ffffff !important;
      font-family: Inter, ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif !important;
      margin: 0;
      padding: 0;
      min-height: 100vh;
    }
    
    /* Ensure React components render properly */
    #admin-root {
      min-height: 100vh;
      width: 100%;
      background-color: #0b0b0c;
    }
    
    /* Hide any large unstyled elements */
    img[src*="data:image"] {
      max-width: 100%;
      height: auto;
    }
    
    /* Sacred theme fonts */
    h1, h2, h3, h4, h5, h6 {
      font-family: Cinzel, ui-serif, Georgia, serif !important;
    }
  </style>
</head>
<body class="bg-neutral-950 text-amber-100">
  <div id="admin-root">
    <AdminShell 
      userRole={userRole} 
      userName={user?.user_metadata?.full_name || user?.email} 
      userEmail={user?.email} 
      client:load 
    />
  </div>
</body>
</html>

