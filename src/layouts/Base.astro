---
/**
 * Base Layout Component
 * 
 * TODO: Add Pagefind search integration in header (https://pagefind.app)
 * TODO: Add newsletter signup form in footer (with privacy-first email service)
 * TODO: Consider adding dark/light theme toggle (currently dark-only)
 */
import '../styles/global.css';
import { supabaseServer } from '../lib/supabase-server';

interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Real & Raw Gospel - Training the Remnant of YAHUAH' } = Astro.props;

// Server-side: detect current session and user email for first paint
let isSignedIn = false;
let userEmail = '';
let initialSession: { access_token: string; refresh_token: string } | null = null;

try {
  const s = supabaseServer(Astro.cookies);
  const { data: sess } = await s.auth.getSession();
  if (sess?.session) {
    isSignedIn = true;
    userEmail = sess.session.user?.email ?? '';
    initialSession = {
      access_token: sess.session.access_token,
      refresh_token: sess.session.refresh_token,
    };
  }
} catch {}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <link rel="icon" type="image/jpeg" href="/rrg-logo.jpg" />
    <title>{title} | Real & Raw Gospel</title>
  </head>
  <body class="min-h-screen flex flex-col bg-black text-neutral-100">
    <header role="banner" class="sticky top-0 z-50 bg-neutral-950/95 backdrop-blur border-b border-neutral-800">
      <nav class="container mx-auto px-4 py-4" aria-label="Main navigation">
        <div class="flex items-center justify-between">
          <a 
            href="/" 
            class="flex items-center gap-3 group focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors"
          >
            <img 
              src="/rrg-logo.jpg" 
              alt="RRG Logo - Lion with Flame Crown" 
              class="h-12 w-12 object-contain"
            />
            <span class="text-xl font-bold text-amber-100 group-hover:text-amber-200 transition-colors hidden sm:block">
              Real & Raw Gospel
            </span>
          </a>
          
          <button 
            id="mobile-menu-toggle" 
            class="md:hidden p-2 rounded-lg hover:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black transition-colors" 
            aria-label="Toggle menu"
            aria-expanded="false"
            aria-controls="nav-menu"
          >
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
          
              <ul id="nav-menu" class="hidden md:flex items-center gap-6">
                <li><a href="/" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Home</a></li>
                <li><a href="/start-here" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Start Here</a></li>
                <li><a href="/videos" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Videos</a></li>
                <li><a href="/bible" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Bible</a></li>
                <li><a href="/blog" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Blog</a></li>
                <li><a href="/music" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Music</a></li>
                <li><a href="/books" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Books</a></li>
                
                <!-- Auth Section -->
                <li id="auth-nav-item" class={isSignedIn ? '' : 'hidden'}>
                  <div id="user-menu" class="relative">
                    <button id="user-menu-button" class="flex items-center gap-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-2 py-1 transition-colors">
                      <span id="user-email" class="text-sm">{userEmail}</span>
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </button>
                    <div id="user-dropdown" class="hidden absolute right-0 mt-2 w-48 bg-neutral-800 border border-neutral-700 rounded-lg shadow-lg py-2 z-50">
                      <a href="/profile" class="block px-4 py-2 text-sm text-neutral-300 hover:bg-neutral-700 hover:text-amber-100 transition-colors">Profile</a>
                      <div id="admin-links" class="hidden">
                        <div class="border-t border-neutral-700 my-2"></div>
                        <a href="/admin-dashboard" class="block px-4 py-2 text-sm text-amber-300 hover:bg-neutral-700 hover:text-amber-100 transition-colors">Admin Dashboard</a>
                        <a href="/admin" class="block px-4 py-2 text-sm text-amber-300 hover:bg-neutral-700 hover:text-amber-100 transition-colors">Content Management</a>
                      </div>
                      <button id="sign-out-btn" class="block w-full text-left px-4 py-2 text-sm text-neutral-300 hover:bg-neutral-700 hover:text-red-400 transition-colors">Sign Out</button>
                    </div>
                  </div>
                </li>
                
                <li id="sign-in-nav-item" class={isSignedIn ? 'hidden' : ''}>
                  <a href="/auth" class="text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Sign In</a>
                </li>
                
                <li><a href="/give" class="bg-amber-700 hover:bg-amber-600 text-white font-semibold px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black transition-colors">Give</a></li>
              </ul>
        </div>
        
        <!-- Mobile menu -->
        <div id="mobile-menu" class="hidden md:hidden mt-4 pb-2">
          <ul class="flex flex-col gap-3" role="list">
            <li><a href="/" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Home</a></li>
            <li><a href="/start-here" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Start Here</a></li>
            <li><a href="/videos" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Videos</a></li>
            <li><a href="/bible" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Bible</a></li>
            <li><a href="/blog" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Blog</a></li>
            <li><a href="/music" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Music</a></li>
            <li><a href="/books" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Books</a></li>
            
            <!-- Mobile Auth Section -->
            <li id="mobile-auth-nav-item" class={isSignedIn ? '' : 'hidden'}>
              <div class="py-2">
                <div class="text-sm text-neutral-400 mb-2">Signed in as:</div>
                <div id="mobile-user-email" class="text-amber-100 font-medium mb-3">{userEmail}</div>
                <div class="space-y-2">
                  <a href="/profile" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Profile</a>
                  <button id="mobile-sign-out-btn" class="block w-full text-left py-2 text-neutral-300 hover:text-red-400 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Sign Out</button>
                </div>
              </div>
            </li>
            
            <li id="mobile-sign-in-nav-item" class={isSignedIn ? 'hidden' : ''}>
              <a href="/auth" class="block py-2 text-neutral-300 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors">Sign In</a>
            </li>
            
            <li><a href="/give" class="block bg-amber-700 hover:bg-amber-600 text-white font-semibold px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black transition-colors text-center">Give</a></li>
          </ul>
        </div>
      </nav>
    </header>

    <main role="main" class="flex-1">
      <slot />
    </main>

    <footer role="contentinfo" class="bg-neutral-950 border-t border-neutral-800 py-12 mt-16">
      <div class="container mx-auto px-4">
        <div class="text-center space-y-6">
          <div class="text-amber-100 font-semibold text-lg">
            Honoring YAHUAH • YAHUSHA • RUACH HAQODESH • EL ELYON
          </div>
          
          <div class="text-neutral-400 text-sm max-w-2xl mx-auto">
            <p>
              Training the remnant in the ways of the Most High. No fluff, no compromise—pure truth from the Word of YAHUAH.
            </p>
          </div>
          
          <div class="text-neutral-500 text-sm space-y-2">
            <p>
              <a 
                href="/privacy" 
                class="text-neutral-400 hover:text-amber-100 focus:outline-none focus:ring-2 focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-black rounded px-1 transition-colors underline"
              >
                Privacy Policy
              </a>
            </p>
            <p>&copy; {new Date().getFullYear()} Real & Raw Gospel. All glory to YAHUAH.</p>
          </div>
        </div>
      </div>
    </footer>

    {initialSession && (
      <script is:inline>
        // Bootstrap initial session from server to client once (object literal)
        window.__RRG_INITIAL_SESSION = {JSON.stringify(initialSession)};
      </script>
    )}

    <script type="module">
      import { getSupabase } from '@/lib/supabase-browser';
      const supabase = getSupabase();

      // If server had a session but localStorage is empty, seed it now
      try {
        const initial = window.__RRG_INITIAL_SESSION;
        if (initial && initial.access_token && initial.refresh_token) {
          const { data: { session } } = await supabase.auth.getSession();
          if (!session) {
            await supabase.auth.setSession({
              access_token: initial.access_token,
              refresh_token: initial.refresh_token,
            });
          }
          try { delete window.__RRG_INITIAL_SESSION; } catch {}
        }
      } catch {}
      const toggle = document.getElementById('mobile-menu-toggle');
      const menu = document.getElementById('mobile-menu');
      
      toggle?.addEventListener('click', (e) => {
        e.stopPropagation();
        const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
        toggle.setAttribute('aria-expanded', String(!isExpanded));
        menu?.classList.toggle('hidden');
      });
      
      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target;
        if (menu && !menu.contains(target) && !toggle?.contains(target)) {
          menu.classList.add('hidden');
          toggle?.setAttribute('aria-expanded', 'false');
        }
      });

      // Auth state management uses verified identity
      let __getUserInFlight = null;
      async function getVerifiedUser() {
        if (!__getUserInFlight) {
          __getUserInFlight = supabase.auth
            .getUser()
            .then(({ data, error }) => (error ? null : (data?.user ?? null)))
            .finally(() => { __getUserInFlight = null; });
        }
        return __getUserInFlight;
      }

      async function checkAuthState() {
        try {
          const user = await getVerifiedUser();
          if (user) showSignedInState(user.email || '');
          else showSignedOutState();
        } catch (error) {
          console.error('🔍 Base layout: Auth check failed:', error);
          showSignedOutState();
        }
      }

      async function showSignedInState(email) {
        console.log('🔍 Base layout: showSignedInState called with email:', email);
        
        // Desktop navigation
        const authNavItem = document.getElementById('auth-nav-item');
        const signInNavItem = document.getElementById('sign-in-nav-item');
        const userEmail = document.getElementById('user-email');
        const adminLinks = document.getElementById('admin-links');
        
        console.log('🔍 Base layout: Navigation elements found:', {
          authNavItem: !!authNavItem,
          signInNavItem: !!signInNavItem,
          userEmail: !!userEmail,
          adminLinks: !!adminLinks
        });
        
        if (authNavItem && signInNavItem && userEmail) {
          console.log('🔍 Base layout: Updating navigation elements...');
          authNavItem.classList.remove('hidden');
          signInNavItem.classList.add('hidden');
          userEmail.textContent = email;
          console.log('🔍 Base layout: Navigation updated successfully');
        } else {
          console.error('🔍 Base layout: Missing navigation elements!');
        }

        // Check if user is admin and show admin links
        // For now, show admin links for your email to test
        if (adminLinks) {
          if (email === 'asjames18@proton.me') {
            adminLinks.classList.remove('hidden');
          } else {
            adminLinks.classList.add('hidden');
          }
        }

        // Mobile navigation
        const mobileAuthNavItem = document.getElementById('mobile-auth-nav-item');
        const mobileSignInNavItem = document.getElementById('mobile-sign-in-nav-item');
        const mobileUserEmail = document.getElementById('mobile-user-email');
        
        if (mobileAuthNavItem && mobileSignInNavItem && mobileUserEmail) {
          mobileAuthNavItem.classList.remove('hidden');
          mobileSignInNavItem.classList.add('hidden');
          mobileUserEmail.textContent = email;
        }
      }

      function showSignedOutState() {
        // Desktop navigation
        const authNavItem = document.getElementById('auth-nav-item');
        const signInNavItem = document.getElementById('sign-in-nav-item');
        
        if (authNavItem && signInNavItem) {
          authNavItem.classList.add('hidden');
          signInNavItem.classList.remove('hidden');
        }

        // Mobile navigation
        const mobileAuthNavItem = document.getElementById('mobile-auth-nav-item');
        const mobileSignInNavItem = document.getElementById('mobile-sign-in-nav-item');
        
        if (mobileAuthNavItem && mobileSignInNavItem) {
          mobileAuthNavItem.classList.add('hidden');
          mobileSignInNavItem.classList.remove('hidden');
        }
      }

      const doSignOut = async () => {
        try {
          // 1) Clear browser session (localStorage)
          await supabase.auth.signOut();
          // 2) Ask server to clear cookies (best-effort)
          try {
            await fetch('/api/auth/signout', { method: 'POST', headers: { 'Content-Type': 'application/json' } });
          } catch {}
          // 3) Update UI and redirect
          const user = await getVerifiedUser();
          if (!user) showSignedOutState();
          window.location.href = '/';
        } catch (error) {
          console.error('Sign out failed:', error);
          alert('Sign out failed. Please try again.');
        }
      };

      // Run immediately (script is after DOM)
      checkAuthState();
      // react to future auth changes
      {
        // Avoid multiple concurrent subscriptions
        try { window.__supabaseAuthSub?.unsubscribe?.(); } catch (err) {}
        const { data } = supabase.auth.onAuthStateChange(async () => {
          const user = await getVerifiedUser();
          if (user) showSignedInState(user.email || '');
          else showSignedOutState();
        });
        window.__supabaseAuthSub = data.subscription;
        // cleanup on page unload
        window.addEventListener('beforeunload', () => {
          try { window.__supabaseAuthSub?.unsubscribe?.(); } catch (err) {}
        });
      }
      
      // Desktop sign out button
      const signOutBtn = document.getElementById('sign-out-btn');
      signOutBtn?.addEventListener('click', (e) => { e.preventDefault(); doSignOut(); });
      
      // Mobile sign out button
      const mobileSignOutBtn = document.getElementById('mobile-sign-out-btn');
      mobileSignOutBtn?.addEventListener('click', (e) => { e.preventDefault(); doSignOut(); });
      
      // --- User menu dropdown (robust toggle) ---
      const userMenuButton = document.getElementById('user-menu-button');
      const userDropdown = document.getElementById('user-dropdown');
      const authNavItem = document.getElementById('auth-nav-item');
      console.debug('Header menu wiring:', { userMenuButton: !!userMenuButton, userDropdown: !!userDropdown, authNavItem: !!authNavItem });
      let userMenuOpen = false;
      
      function openUserMenu() {
        if (!userDropdown) return;
        userDropdown.classList.remove('hidden');
        userDropdown.style.display = 'block';
        userMenuButton?.setAttribute('aria-expanded', 'true');
        userMenuOpen = true;
      }
      function closeUserMenu() {
        if (!userDropdown) return;
        userDropdown.classList.add('hidden');
        userMenuButton?.setAttribute('aria-expanded', 'false');
        userMenuOpen = false;
      }
      userMenuButton?.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        userMenuOpen ? closeUserMenu() : openUserMenu();
      });
      // Fallback: clicking the whole auth item also toggles
      authNavItem?.addEventListener('click', (e) => {
        const target = e.target;
        if (target && target.closest && target.closest('#user-menu-button')) return; // handled above
        if (!userDropdown) return;
        // Only toggle when the menu is visible in header (avoid link clicks inside dropdown)
        if (!userMenuOpen) openUserMenu();
      });
      userDropdown?.addEventListener('click', (e) => e.stopPropagation());
      document.addEventListener('click', (e) => {
        if (!userMenuOpen) return;
        const t = e.target;
        if (userDropdown?.contains(t) || userMenuButton?.contains(t)) return;
        closeUserMenu();
      });
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && userMenuOpen) closeUserMenu();
      });
    </script>
  </body>
</html>
